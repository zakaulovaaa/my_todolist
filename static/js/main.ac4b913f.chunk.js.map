{"version":3,"sources":["logo.svg","App.js","index.js"],"names":["module","exports","useStyles","makeStyles","table","minWidth","rows_task","st_","display_date_format","str","document","addEventListener","tab","getElementById","onclick","e","cell","target","row","parentElement","rows","children","i","length","columns","j","splice","row_json_add","ReactDOM","render","rows_task_","update_statistic","ondblclick","element","Open_my_popap","popap_openis","task_new","id","filter_arr","filter","oninput","value","toLowerCase","indexOf","row_json_get","My_table","props","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","align","TableBody","this","map","key","description_","scope","status_","priority_","date1","date2","React","Component","cookie","JSON","stringify","parse","slice","now_date","x","Date","getFullYear","getMonth","getDate","close_popap","date_","is_new_","Popap_status","state","is_new","input_status","handleChangeInputStatus","bind","event","setState","onChange","My_popap","input_description","input_priority","input_date","handleChangeInputDescription","handleSubmit","new_task","handleChangeInputPriority","handleChangeInputDate","preventDefault","alert","push","onClick","type","updateData","textContent","cnt_new","cnt_in_work","cnt_finish"],"mappings":"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","file":"static/js/main.ac4b913f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport logo from './logo.svg';\nimport './App.css';\n\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nconst classes = useStyles;\n\nlet rows_task = []; //массив со значениями для таблицы\nlet id_new = 0; //счетчик для создания id\nlet st_ = \"Новая\";\n\nfunction createData( description_, status_, priority_, date1, date2 ) { //собираем структуру для добавления в rows_task \n  return { description_, status_, priority_, date1, date2 };\n}\n\nfunction display_date_format( str ) { //преобразуем дату в формад дд.мм.гггг\n  if ( str == '-' ) return '-';\n  return ( str[8] + str[9] + '.' + str[5] + str[6] + '.' + str[0] + str[1] + str[2] + str[3] );\n}\n\ndocument.addEventListener( \"DOMContentLoaded\", () => { //действия при кликах на таблицу\n  let tab = document.getElementById( \"tab\" ); \n\n  tab.onclick = e => { //при онклике удалять строку из таблицы\n    let cell = e.target;\n    let row = cell.parentElement;\n    let rows = row.parentElement.children;\n    for (var i = 0; i < rows.length; ++i) {\n      if ( rows[i] === row ) {\n        break;\n      }\n    }\n    let columns = row.children;\n    for (var j = 0; j < columns.length; ++j) {\n      if ( columns[j] === cell ) {\n        break;\n      }\n    }\n    if (j == 5) {\n      rows_task.splice( i, 1 );\n      row_json_add();\n      ReactDOM.render(< My_table rows_task_={ rows_task } /> , document.getElementById( 'content_table' ));\n      update_statistic();\n    }\n  };\n\n  tab.ondblclick = e => { //при даблклике открывать попап для редактирования\n    let cell = e.target;\n    let row = cell.parentElement;\n    let rows = row.parentElement.children;\n    for (var i = 0; i < rows.length; ++i) {\n      if ( rows[i] === row ) {\n        break;\n      }\n    }\n    let columns = row.children;\n    for (var j = 0; j < columns.length; ++j) {\n      if ( columns[j] === cell ) {\n        break;\n      }\n    }\n    const element = < Open_my_popap\n      popap_openis={ true }\n      task_new = { false }\n      id = { i }\n    />;\n    ReactDOM.render( element, document.getElementById( 'root' ) );\n  };\n});\n\ndocument.addEventListener( \"DOMContentLoaded\", () => { //фильтры по статусу\n  document.getElementById( \"statistic_all_task\" ).onclick = e => {\n    ReactDOM.render(< My_table rows_task_ = { rows_task } />, document.getElementById( 'content_table' ));\n  }\n  document.getElementById( \"statistic_new_task\" ).onclick = e => {\n    let filter_arr = rows_task.filter(\n      function( row ) {\n        return row['status_'] == 'Новая';\n      }\n    )\n    ReactDOM.render(< My_table rows_task_ = { filter_arr } />, document.getElementById( 'content_table' ));\n  }\n  document.getElementById( \"statistic_in_work_task\" ).onclick = e => {\n    let filter_arr = rows_task.filter(\n      function( row ) {\n        return row['status_'] == 'В работе';\n      }\n    )\n    ReactDOM.render(< My_table rows_task_ = { filter_arr } />, document.getElementById( 'content_table' ));\n  }\n  document.getElementById( \"statistic_completed_task\" ).onclick = e => {\n    let filter_arr = rows_task.filter(\n      function( row ) {\n        return row['status_'] == 'Завершено';\n      }\n    )\n    ReactDOM.render(< My_table rows_task_ = { filter_arr } />, document.getElementById( 'content_table' ));\n  }\n});\n\ndocument.addEventListener( \"DOMContentLoaded\", () => { //при изменении поля \"поиск\" фильтровать список\n  document.getElementById( 'search_task' ).oninput = e => {\n    let str = document.getElementById( \"search_task\" ).value.toLowerCase();\n    let filter_arr = rows_task.filter(\n      function( row ) {\n        return (row['description_'].toLowerCase().indexOf( str ) != -1);\n      }\n    )\n    row_json_get();\n    ReactDOM.render(< My_table rows_task_ = { filter_arr } />, document.getElementById( 'content_table' ));\n  }\n});\n\nclass My_table extends React.Component {  //собссна, сама таблица\n  constructor( props ) {\n    super( props );\n  }\n  render() {\n    return(\n      <TableContainer component={Paper} id=\"tab\">\n        <Table className={useStyles.table} aria-label=\"table\">\n        <TableHead>\n          <TableRow>\n          <TableCell>Описание</TableCell>\n          <TableCell align=\"right\">Статус</TableCell>\n          <TableCell align=\"right\">Приоритет</TableCell>\n          <TableCell align=\"right\">Плановая дата окончания</TableCell>\n          <TableCell align=\"right\">Фактическая дата окончания</TableCell>\n          <TableCell align=\"right\">Действие</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {this.props.rows_task_.map(row => (\n          <TableRow key = { row.description_ }>\n            <TableCell component=\"th\" scope=\"row\"> { row.description_} </TableCell>\n            <TableCell align=\"right\">{ row.status_ }</TableCell>\n            <TableCell align=\"right\">{ row.priority_ }</TableCell>\n            <TableCell align=\"right\">{ display_date_format( row.date1 ) }</TableCell>\n            <TableCell align=\"right\">{ display_date_format( row.date2 ) }</TableCell>\n            <TableCell align=\"right\" id=\"act_delete\">{ 'Удалить' }</TableCell>\n          </TableRow>\n          ))}\n        </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  }\n}\n\nfunction row_json_add() {  //закидываем массив в cookie\n  document.cookie = JSON.stringify( rows_task );\n}\n\nfunction row_json_get() { //вытаскиваем массив из cookie\n  rows_task = JSON.parse( document.cookie.slice( document.cookie.indexOf( '[' ) ) );\n  ReactDOM.render(< My_table rows_task_ = { rows_task } />, document.getElementById( 'content_table' ));\n}\n\n\nfunction now_date() { //возвращает текущую дату в правильном формате\n  let x = new Date();\n  return (x.getFullYear() + \"-\" + \n          (x.getMonth() + 1 < 10 ? \"0\" + (x.getMonth() + 1) : (x.getMonth() + 1) ) + \"-\" + \n          (x.getDate() < 10 ? \"0\" + x.getDate() : x.getDate()));\n}\n\nfunction close_popap() { //закрывает попап\n  const element = < Open_my_popap popap_openis = { false } />;\n  ReactDOM.render( element, document.getElementById( 'root' ) );\n}\n\nfunction Open_my_popap(props) { // открываем попап для создания новой задачи\n  if ( props.popap_openis ) {\n    if ( props.task_new ) {\n      return (\n        <My_popap description_ = { '' } \n                  status_ = { 'Новая' } \n                  priority_ = { 'Низкий' } \n                  date_ = { now_date() } \n                  is_new_ = { true }\n        />\n      );\n    } \n    st_ = rows_task[props.id]['status_'];\n    return (\n      <My_popap description_ = { rows_task[props.id]['description_'] }\n                status_ = { rows_task[props.id]['status_'] }\n                priority_ = { rows_task[props.id]['priority_'] }\n                date_ = { rows_task[props.id]['date1'] }\n                is_new_ = { false }\n                id = { props.id }\n      />\n    );\n  } \n}\n\nclass Popap_status extends React.Component {\n  constructor( props ) {\n    super( props );\n    this.state = {\n      is_new: props.is_new_,\n      input_status: props.input_status\n    }\n    this.handleChangeInputStatus = this.handleChangeInputStatus.bind( this );\n  }\n  handleChangeInputStatus( event ) {\n    this.setState({ input_status: event.target.value });\n    st_ = event.target.value;\n  }\n  render() {\n    if ( this.state.is_new ) {\n      return(\n        <select value = { this.state.input_status } onChange = { this.handleChangeInputStatus }>\n          <option>Новая</option>\n        </select>\n      );\n    }\n    return(\n      <select value = { this.state.input_status } onChange = { this.handleChangeInputStatus }>\n        <option>Новая</option>\n        <option>В работе</option>\n        <option>Завершено</option>\n      </select>\n    );\n  }\n}\n\nclass My_popap extends React.Component {\n  \n  constructor( props ) {\n    super( props );\n\n    this.state = {\n      input_description: props.description_,\n      input_status: props.status_,\n      input_priority: props.priority_,\n      input_date: props.date_,\n      is_new: props.is_new_\n    };\n    this.handleChangeInputDescription = this.handleChangeInputDescription.bind( this );\n    this.handleSubmit = this.handleSubmit.bind( this );\n    this.new_task = this.new_task.bind( this );\n    this.handleChangeInputPriority = this.handleChangeInputPriority.bind( this );\n    this.handleChangeInputDate = this.handleChangeInputDate.bind( this );\n\n  }\n  \n  handleChangeInputDate( event ) {\n    this.setState({ input_date: event.target.value });\n  }\n\n  handleChangeInputDescription( event ) {\n    this.setState({ input_description: event.target.value });\n  }\n\n  handleChangeInputPriority( event ) {\n    this.setState({ input_priority:event.target.value });\n  }\n\n  handleSubmit( event ) {\n    event.preventDefault();\n  }\n\n  new_task( event ) {\n    if (this.state.input_description == '') {\n      alert(\"Поле \\\"Описание\\\" обязательно для заполнения\");\n    } else {\n      if ( this.props.is_new_ ) {\n        rows_task.push( createData( this.state.input_description, st_, this.state.input_priority, \n                                    this.state.input_date, \"-\" ) );\n      } else {\n        rows_task[this.props.id]['description_'] = this.state.input_description;\n        if (rows_task[this.props.id]['status_'] == 'Завершено' && st_ == 'Завершено') {\n          \n        } else {\n          if (st_ == 'Завершено') {\n            rows_task[this.props.id]['date2'] = now_date();\n          } else {\n            rows_task[this.props.id]['date2'] = '-';\n          }\n        }\n        rows_task[this.props.id]['status_'] = st_;\n        rows_task[this.props.id]['date1'] = this.state.input_date;\n        rows_task[this.props.id]['priority_'] = this.state.input_priority;\n      } \n      close_popap();\n      update_statistic();\n      row_json_add();\n      ReactDOM.render(< My_table rows_task_={ rows_task } />, document.getElementById( 'content_table' ));\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Popap_window\">\n        <div className=\"popap_main\">\n          <header className=\"Popap_head\">\n            <h3 id=\"blyat\">Создание / редактирование задачи</h3>\n            <button className=\"popap_close\" onClick={ close_popap }>x</button>\n          </header>\n\n          <p>Описание(*):</p>\n          \n          <input type=\"text\" value={ this.state.input_description } onChange={ this.handleChangeInputDescription } />\n        \n          <div className=\"priority_status\">\n            <div className=\"priority\">\n              <p>Приоритет:</p>\n              <select value={ this.state.input_priority } onChange={ this.handleChangeInputPriority }> \n                <option>Низкий</option>\n                <option>Средний</option>\n                <option>Высокий</option>\n              </select>\n            </div>\n            <div className=\"status\">\n              <p>Статус:</p>\n\n              <Popap_status is_new_ = { this.state.is_new } \n                            input_status = { this.state.input_status }\n                            updateData = { this.updateData }\n              /> \n            </div>\n          </div>\n          <div className=\"deadline\">\n            <p>Крайний срок:</p>\n            <input type=\"date\" id=\"date\" value={ this.state.input_date } onChange={ this.handleChangeInputDate }></input>\n          </div>\n          <p className=\"for_potap_btn\">\n            <button className=\"popap_btn\" onClick={ this.new_task } >Сохранить</button>\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nfunction update_statistic() {\n  document.getElementById( 'statistic_all_task' ).textContent = 'Всего - ' + rows_task.length;\n  let cnt_new = 0, cnt_in_work = 0, cnt_finish = 0;\n  for (let i = 0; i < rows_task.length; i++) {\n    if (rows_task[i]['status_'] == 'Новая') {\n      cnt_new++;\n    }\n    if (rows_task[i]['status_'] == 'В работе') {\n      cnt_in_work++;\n    }\n    if (rows_task[i]['status_'] == 'Завершено') {\n      cnt_finish++;\n    }\n  }\n  document.getElementById( 'statistic_new_task' ).textContent = 'Новых - ' + cnt_new;\n  document.getElementById( 'statistic_in_work_task' ).textContent = 'В работе - ' + cnt_in_work;\n  document.getElementById( 'statistic_completed_task' ).textContent = 'Завершено - ' + cnt_finish;\n}\n\n\nReactDOM.render(< My_table rows_task_ = { rows_task } />, document.getElementById( 'content_table' ));\nrow_json_get();\nupdate_statistic();\n\nexport default Open_my_popap;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Open_my_popap from './App';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\n\nlet elem = document.getElementById('add_task');\nelem.addEventListener(\"click\", open_popap);\n\nfunction open_popap() {\n    alert(\"МЕНЯ НАЖАЛИ\");\n    const element = <Open_my_popap\n        popap_openis={true}\n        task_new={true}\n    />;\n    ReactDOM.render(element, document.getElementById('root'));\n}\n\n\n"],"sourceRoot":""}