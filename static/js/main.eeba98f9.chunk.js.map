{"version":3,"sources":["index.js"],"names":["document","getElementById","addEventListener","alert","element","Open_my_popap","popap_openis","task_new","ReactDOM","render","useStyles","makeStyles","table","minWidth","rows_task","st_","display_date_format","str","tab","onclick","e","cell","target","row","parentElement","rows","children","i","length","columns","j","splice","row_json_add","My_table","rows_task_","update_statistic","ondblclick","id","filter_arr","filter","oninput","value","toLowerCase","indexOf","row_json_get","props","component","Paper","className","aria-label","align","this","map","key","description_","scope","status_","priority_","date1","date2","React","Component","cookie","JSON","stringify","parse","slice","now_date","x","Date","getFullYear","getMonth","getDate","close_popap","My_popap","date_","is_new_","Popap_status","state","is_new","input_status","handleChangeInputStatus","bind","event","setState","onChange","input_description","input_priority","input_date","handleChangeInputDescription","handleSubmit","new_task","handleChangeInputPriority","handleChangeInputDate","preventDefault","push","onClick","type","updateData","textContent","cnt_new","cnt_in_work","cnt_finish"],"mappings":"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","file":"static/js/main.eeba98f9.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\n// import Open_my_popap from './App';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\n\nlet elem = document.getElementById('add_task');\nelem.addEventListener(\"click\", open_popap);\n\nfunction open_popap() {\n    alert(\"МЕНЯ НАЖАЛИ\");\n\n    const element = <Open_my_popap\n        popap_openis={true}\n        task_new={true}\n    />;\n    ReactDOM.render(element, document.getElementById('root'));\n}\n\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nconst classes = useStyles;\n\nlet rows_task = []; //массив со значениями для таблицы\nlet id_new = 0; //счетчик для создания id\nlet st_ = \"Новая\";\n\nfunction createData( description_, status_, priority_, date1, date2 ) { //собираем структуру для добавления в rows_task \n  return { description_, status_, priority_, date1, date2 };\n}\n\nfunction display_date_format( str ) { //преобразуем дату в формад дд.мм.гггг\n  if ( str == '-' ) return '-';\n  return ( str[8] + str[9] + '.' + str[5] + str[6] + '.' + str[0] + str[1] + str[2] + str[3] );\n}\n\ndocument.addEventListener( \"DOMContentLoaded\", () => { //действия при кликах на таблицу\n  let tab = document.getElementById( \"tab\" ); \n\n  tab.onclick = e => { //при онклике удалять строку из таблицы\n    let cell = e.target;\n    let row = cell.parentElement;\n    let rows = row.parentElement.children;\n    for (var i = 0; i < rows.length; ++i) {\n      if ( rows[i] === row ) {\n        break;\n      }\n    }\n    let columns = row.children;\n    for (var j = 0; j < columns.length; ++j) {\n      if ( columns[j] === cell ) {\n        break;\n      }\n    }\n    if (j == 5) {\n      rows_task.splice( i, 1 );\n      row_json_add();\n      ReactDOM.render(< My_table rows_task_={ rows_task } /> , document.getElementById( 'content_table' ));\n      update_statistic();\n    }\n  };\n\n  tab.ondblclick = e => { //при даблклике открывать попап для редактирования\n    let cell = e.target;\n    let row = cell.parentElement;\n    let rows = row.parentElement.children;\n    for (var i = 0; i < rows.length; ++i) {\n      if ( rows[i] === row ) {\n        break;\n      }\n    }\n    let columns = row.children;\n    for (var j = 0; j < columns.length; ++j) {\n      if ( columns[j] === cell ) {\n        break;\n      }\n    }\n    const element = < Open_my_popap\n      popap_openis={ true }\n      task_new = { false }\n      id = { i }\n    />;\n    ReactDOM.render( element, document.getElementById( 'root' ) );\n  };\n});\n\ndocument.addEventListener( \"DOMContentLoaded\", () => { //фильтры по статусу\n  document.getElementById( \"statistic_all_task\" ).onclick = e => {\n    ReactDOM.render(< My_table rows_task_ = { rows_task } />, document.getElementById( 'content_table' ));\n  }\n  document.getElementById( \"statistic_new_task\" ).onclick = e => {\n    let filter_arr = rows_task.filter(\n      function( row ) {\n        return row['status_'] == 'Новая';\n      }\n    )\n    ReactDOM.render(< My_table rows_task_ = { filter_arr } />, document.getElementById( 'content_table' ));\n  }\n  document.getElementById( \"statistic_in_work_task\" ).onclick = e => {\n    let filter_arr = rows_task.filter(\n      function( row ) {\n        return row['status_'] == 'В работе';\n      }\n    )\n    ReactDOM.render(< My_table rows_task_ = { filter_arr } />, document.getElementById( 'content_table' ));\n  }\n  document.getElementById( \"statistic_completed_task\" ).onclick = e => {\n    let filter_arr = rows_task.filter(\n      function( row ) {\n        return row['status_'] == 'Завершено';\n      }\n    )\n    ReactDOM.render(< My_table rows_task_ = { filter_arr } />, document.getElementById( 'content_table' ));\n  }\n});\n\ndocument.addEventListener( \"DOMContentLoaded\", () => { //при изменении поля \"поиск\" фильтровать список\n  document.getElementById( 'search_task' ).oninput = e => {\n    let str = document.getElementById( \"search_task\" ).value.toLowerCase();\n    let filter_arr = rows_task.filter(\n      function( row ) {\n        return (row['description_'].toLowerCase().indexOf( str ) != -1);\n      }\n    )\n    row_json_get();\n    ReactDOM.render(< My_table rows_task_ = { filter_arr } />, document.getElementById( 'content_table' ));\n  }\n});\n\nclass My_table extends React.Component {  //собссна, сама таблица\n  constructor( props ) {\n    super( props );\n  }\n  render() {\n    return(\n      <TableContainer component={Paper} id=\"tab\">\n        <Table className={useStyles.table} aria-label=\"table\">\n        <TableHead>\n          <TableRow>\n          <TableCell>Описание</TableCell>\n          <TableCell align=\"right\">Статус</TableCell>\n          <TableCell align=\"right\">Приоритет</TableCell>\n          <TableCell align=\"right\">Плановая дата окончания</TableCell>\n          <TableCell align=\"right\">Фактическая дата окончания</TableCell>\n          <TableCell align=\"right\">Действие</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {this.props.rows_task_.map(row => (\n          <TableRow key = { row.description_ }>\n            <TableCell component=\"th\" scope=\"row\"> { row.description_} </TableCell>\n            <TableCell align=\"right\">{ row.status_ }</TableCell>\n            <TableCell align=\"right\">{ row.priority_ }</TableCell>\n            <TableCell align=\"right\">{ display_date_format( row.date1 ) }</TableCell>\n            <TableCell align=\"right\">{ display_date_format( row.date2 ) }</TableCell>\n            <TableCell align=\"right\" id=\"act_delete\">{ 'Удалить' }</TableCell>\n          </TableRow>\n          ))}\n        </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  }\n}\n\nfunction row_json_add() {  //закидываем массив в cookie\n  document.cookie = JSON.stringify( rows_task );\n}\n\nfunction row_json_get() { //вытаскиваем массив из cookie\n  rows_task = JSON.parse( document.cookie.slice( document.cookie.indexOf( '[' ) ) );\n  ReactDOM.render(< My_table rows_task_ = { rows_task } />, document.getElementById( 'content_table' ));\n}\n\n\nfunction now_date() { //возвращает текущую дату в правильном формате\n  let x = new Date();\n  return (x.getFullYear() + \"-\" + \n          (x.getMonth() + 1 < 10 ? \"0\" + (x.getMonth() + 1) : (x.getMonth() + 1) ) + \"-\" + \n          (x.getDate() < 10 ? \"0\" + x.getDate() : x.getDate()));\n}\n\nfunction close_popap() { //закрывает попап\n  const element = < Open_my_popap popap_openis = { false } />;\n  ReactDOM.render( element, document.getElementById( 'root' ) );\n}\n\nfunction Open_my_popap(props) { // открываем попап для создания новой задачи\n  if ( props.popap_openis ) {\n    if ( props.task_new ) {\n      return (\n        <My_popap description_ = { '' } \n                  status_ = { 'Новая' } \n                  priority_ = { 'Низкий' } \n                  date_ = { now_date() } \n                  is_new_ = { true }\n        />\n      );\n    } \n    st_ = rows_task[props.id]['status_'];\n    return (\n      <My_popap description_ = { rows_task[props.id]['description_'] }\n                status_ = { rows_task[props.id]['status_'] }\n                priority_ = { rows_task[props.id]['priority_'] }\n                date_ = { rows_task[props.id]['date1'] }\n                is_new_ = { false }\n                id = { props.id }\n      />\n    );\n  } \n}\n\nclass Popap_status extends React.Component {\n  constructor( props ) {\n    super( props );\n    this.state = {\n      is_new: props.is_new_,\n      input_status: props.input_status\n    }\n    this.handleChangeInputStatus = this.handleChangeInputStatus.bind( this );\n  }\n  handleChangeInputStatus( event ) {\n    this.setState({ input_status: event.target.value });\n    st_ = event.target.value;\n  }\n  render() {\n    if ( this.state.is_new ) {\n      return(\n        <select value = { this.state.input_status } onChange = { this.handleChangeInputStatus }>\n          <option>Новая</option>\n        </select>\n      );\n    }\n    return(\n      <select value = { this.state.input_status } onChange = { this.handleChangeInputStatus }>\n        <option>Новая</option>\n        <option>В работе</option>\n        <option>Завершено</option>\n      </select>\n    );\n  }\n}\n\nclass My_popap extends React.Component {\n  \n  constructor( props ) {\n    super( props );\n\n    this.state = {\n      input_description: props.description_,\n      input_status: props.status_,\n      input_priority: props.priority_,\n      input_date: props.date_,\n      is_new: props.is_new_\n    };\n    this.handleChangeInputDescription = this.handleChangeInputDescription.bind( this );\n    this.handleSubmit = this.handleSubmit.bind( this );\n    this.new_task = this.new_task.bind( this );\n    this.handleChangeInputPriority = this.handleChangeInputPriority.bind( this );\n    this.handleChangeInputDate = this.handleChangeInputDate.bind( this );\n\n  }\n  \n  handleChangeInputDate( event ) {\n    this.setState({ input_date: event.target.value });\n  }\n\n  handleChangeInputDescription( event ) {\n    this.setState({ input_description: event.target.value });\n  }\n\n  handleChangeInputPriority( event ) {\n    this.setState({ input_priority:event.target.value });\n  }\n\n  handleSubmit( event ) {\n    event.preventDefault();\n  }\n\n  new_task( event ) {\n    if (this.state.input_description == '') {\n      alert(\"Поле \\\"Описание\\\" обязательно для заполнения\");\n    } else {\n      if ( this.props.is_new_ ) {\n        rows_task.push( createData( this.state.input_description, st_, this.state.input_priority, \n                                    this.state.input_date, \"-\" ) );\n      } else {\n        rows_task[this.props.id]['description_'] = this.state.input_description;\n        if (rows_task[this.props.id]['status_'] == 'Завершено' && st_ == 'Завершено') {\n          \n        } else {\n          if (st_ == 'Завершено') {\n            rows_task[this.props.id]['date2'] = now_date();\n          } else {\n            rows_task[this.props.id]['date2'] = '-';\n          }\n        }\n        rows_task[this.props.id]['status_'] = st_;\n        rows_task[this.props.id]['date1'] = this.state.input_date;\n        rows_task[this.props.id]['priority_'] = this.state.input_priority;\n      } \n      close_popap();\n      update_statistic();\n      row_json_add();\n      ReactDOM.render(< My_table rows_task_={ rows_task } />, document.getElementById( 'content_table' ));\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Popap_window\">\n        <div className=\"popap_main\">\n          <header className=\"Popap_head\">\n            <h3 id=\"blyat\">Создание / редактирование задачи</h3>\n            <button className=\"popap_close\" onClick={ close_popap }>x</button>\n          </header>\n\n          <p>Описание(*):</p>\n          \n          <input type=\"text\" value={ this.state.input_description } onChange={ this.handleChangeInputDescription } />\n        \n          <div className=\"priority_status\">\n            <div className=\"priority\">\n              <p>Приоритет:</p>\n              <select value={ this.state.input_priority } onChange={ this.handleChangeInputPriority }> \n                <option>Низкий</option>\n                <option>Средний</option>\n                <option>Высокий</option>\n              </select>\n            </div>\n            <div className=\"status\">\n              <p>Статус:</p>\n\n              <Popap_status is_new_ = { this.state.is_new } \n                            input_status = { this.state.input_status }\n                            updateData = { this.updateData }\n              /> \n            </div>\n          </div>\n          <div className=\"deadline\">\n            <p>Крайний срок:</p>\n            <input type=\"date\" id=\"date\" value={ this.state.input_date } onChange={ this.handleChangeInputDate }></input>\n          </div>\n          <p className=\"for_potap_btn\">\n            <button className=\"popap_btn\" onClick={ this.new_task } >Сохранить</button>\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nfunction update_statistic() {\n  document.getElementById( 'statistic_all_task' ).textContent = 'Всего - ' + rows_task.length;\n  let cnt_new = 0, cnt_in_work = 0, cnt_finish = 0;\n  for (let i = 0; i < rows_task.length; i++) {\n    if (rows_task[i]['status_'] == 'Новая') {\n      cnt_new++;\n    }\n    if (rows_task[i]['status_'] == 'В работе') {\n      cnt_in_work++;\n    }\n    if (rows_task[i]['status_'] == 'Завершено') {\n      cnt_finish++;\n    }\n  }\n  document.getElementById( 'statistic_new_task' ).textContent = 'Новых - ' + cnt_new;\n  document.getElementById( 'statistic_in_work_task' ).textContent = 'В работе - ' + cnt_in_work;\n  document.getElementById( 'statistic_completed_task' ).textContent = 'Завершено - ' + cnt_finish;\n}\n\n\nReactDOM.render(< My_table rows_task_ = { rows_task } />, document.getElementById( 'content_table' ));\nrow_json_get();\nupdate_statistic();\n"],"sourceRoot":""}